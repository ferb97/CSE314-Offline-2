diff --git a/Makefile b/Makefile
index 39a99d7..b3663db 100644
--- a/Makefile
+++ b/Makefile
@@ -132,6 +132,8 @@ UPROGS=\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
+	$U/_trace\
+	$U/_history\
 
 fs.img: mkfs/mkfs README $(UPROGS)
 	mkfs/mkfs fs.img README $(UPROGS)
diff --git a/kernel/defs.h b/kernel/defs.h
index a3c962b..10706a3 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -8,6 +8,7 @@ struct spinlock;
 struct sleeplock;
 struct stat;
 struct superblock;
+struct syscall_stat;
 
 // bio.c
 void            binit(void);
@@ -106,6 +107,8 @@ void            yield(void);
 int             either_copyout(int user_dst, uint64 dst, void *src, uint64 len);
 int             either_copyin(void *dst, int user_src, uint64 src, uint64 len);
 void            procdump(void);
+int             trace(int);
+int             history(int, struct syscall_stat*);
 
 // swtch.S
 void            swtch(struct context*, struct context*);
diff --git a/kernel/proc.c b/kernel/proc.c
index 959b778..1275463 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -19,6 +19,9 @@ extern void forkret(void);
 static void freeproc(struct proc *p);
 
 extern char trampoline[]; // trampoline.S
+extern int syscall_count[NSYSCALLS];
+extern int syscall_accum_time[NSYSCALLS];
+extern char sysnames[NSYSCALLS][10];
 
 // helps ensure that wakeups of wait()ing
 // parents are not lost. helps obey the
@@ -124,6 +127,7 @@ allocproc(void)
 found:
   p->pid = allocpid();
   p->state = USED;
+  p->traced_pid = 0;
 
   // Allocate a trapframe page.
   if((p->trapframe = (struct trapframe *)kalloc()) == 0){
@@ -681,3 +685,21 @@ procdump(void)
     printf("\n");
   }
 }
+
+int
+trace(int n)
+{
+  struct proc *p = myproc();
+  p->traced_pid = n;
+  return 0;
+}
+
+int
+history(int n, struct syscall_stat* stat1)
+{
+  safestrcpy(stat1->syscall_name, sysnames[n], sizeof(sysnames[n]));
+  stat1->count = syscall_count[n];
+  stat1->accum_time = syscall_accum_time[n];
+  //printf("Me in proc: %s   %d   %d   \n",stat1->syscall_name,stat1->count,stat1->accum_time);
+  return 0;
+}
diff --git a/kernel/proc.h b/kernel/proc.h
index d021857..3562177 100644
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -27,6 +27,7 @@ struct cpu {
 };
 
 extern struct cpu cpus[NCPU];
+#define NSYSCALLS 24
 
 // per-process data for the trap handling code in trampoline.S.
 // sits in a page by itself just under the trampoline page in the
@@ -91,6 +92,7 @@ struct proc {
   int killed;                  // If non-zero, have been killed
   int xstate;                  // Exit status to be returned to parent's wait
   int pid;                     // Process ID
+  int traced_pid;              // Traced Process ID
 
   // wait_lock must be held when using this:
   struct proc *parent;         // Parent process
@@ -105,3 +107,9 @@ struct proc {
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
 };
+
+struct syscall_stat{
+    char syscall_name[16];
+    int count;
+    int accum_time;
+};
diff --git a/kernel/syscall.c b/kernel/syscall.c
index ed65409..73eb09f 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -7,6 +7,30 @@
 #include "syscall.h"
 #include "defs.h"
 
+int syscall_count[NSYSCALLS];
+int syscall_accum_time[NSYSCALLS];
+int trace_pid = -1, l1 = 0, l2 = 0, l3 = 0;
+int doAddr = 1;
+int doArgStr = 0;
+
+struct integer_arg{
+  int value;
+  int index;
+};
+
+struct address_arg{
+  uint64 address;
+  int index;
+};
+
+struct string_arg{
+  char str[200];
+  int index;
+};
+
+struct integer_arg int_args[10];
+struct address_arg addr_args[10];
+struct string_arg str_args[10];
 // Fetch the uint64 at addr from the current process.
 int
 fetchaddr(uint64 addr, uint64 *ip)
@@ -27,6 +51,15 @@ fetchstr(uint64 addr, char *buf, int max)
   struct proc *p = myproc();
   if(copyinstr(p->pagetable, buf, addr, max) < 0)
     return -1;
+  int num;
+  num = p->trapframe->a7;
+  if(num == trace_pid && doArgStr){
+    //printf("pid: %d, syscall: %s, return: %d\n", sys_getpid(), sysnames[num], retVal);
+    //printf("%s, ", buf);
+    safestrcpy(str_args[l3].str, buf, sizeof(buf));
+    l3++;
+    doArgStr = 0;
+  }
   return strlen(buf);
 }
 
@@ -57,6 +90,17 @@ void
 argint(int n, int *ip)
 {
   *ip = argraw(n);
+  int num;
+  struct proc *p = myproc();
+
+  num = p->trapframe->a7;
+  if(num == trace_pid){
+    //printf("pid: %d, syscall: %s, return: %d\n", sys_getpid(), sysnames[num], retVal);
+    //printf("%d, ", *ip);
+    int_args[l1].value = *ip;
+    int_args[l1].index = n;
+    l1++;
+  }
 }
 
 // Retrieve an argument as a pointer.
@@ -66,6 +110,17 @@ void
 argaddr(int n, uint64 *ip)
 {
   *ip = argraw(n);
+  int num;
+  struct proc *p = myproc();
+
+  num = p->trapframe->a7;
+  if(num == trace_pid && doAddr){
+    //printf("pid: %d, syscall: %s, return: %d\n", sys_getpid(), sysnames[num], retVal);
+    //printf("%p, ", *ip);
+    addr_args[l2].address = *ip;
+    addr_args[l2].index = n;
+    l2++;
+  }
 }
 
 // Fetch the nth word-sized system call argument as a null-terminated string.
@@ -75,7 +130,11 @@ int
 argstr(int n, char *buf, int max)
 {
   uint64 addr;
+  doAddr = 0;
+  str_args[l3].index = n;
   argaddr(n, &addr);
+  doAddr = 1;
+  doArgStr = 1;
   return fetchstr(addr, buf, max);
 }
 
@@ -101,6 +160,8 @@ extern uint64 sys_unlink(void);
 extern uint64 sys_link(void);
 extern uint64 sys_mkdir(void);
 extern uint64 sys_close(void);
+extern uint64 sys_trace(void);
+extern uint64 sys_history(void);
 
 // An array mapping syscall numbers from syscall.h
 // to the function that handles the system call.
@@ -126,19 +187,107 @@ static uint64 (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_trace]   sys_trace,
+[SYS_history] sys_history,
+};
+
+char sysnames[NSYSCALLS][10] = {
+    "",
+    "fork",
+    "exit",
+    "wait",
+    "pipe",
+    "read",
+    "kill",
+    "exec",
+    "fstat",
+    "chdir",
+    "dup",
+    "getpid",
+    "sbrk",
+    "sleep",
+    "uptime",
+    "open",
+    "write",
+    "mknod",
+    "unlink",
+    "link",
+    "mkdir",
+    "close",
+    "trace",
+    "history",
 };
 
 void
 syscall(void)
 {
-  int num;
+  int num, i, j;
   struct proc *p = myproc();
 
   num = p->trapframe->a7;
   if(num > 0 && num < NELEM(syscalls) && syscalls[num]) {
     // Use num to lookup the system call function for num, call it,
     // and store its return value in p->trapframe->a0
-    p->trapframe->a0 = syscalls[num]();
+
+    if(num == p->traced_pid){
+      //printf("pid: %d, syscall: %s, return: %d\n", sys_getpid(), sysnames[num], retVal);
+      for(i = 0; i < 10; i++){
+        int_args[i].value = 0;
+        int_args[i].index = -1;
+        addr_args[i].address = 0;
+        addr_args[i].index = -1;
+        safestrcpy(str_args[i].str, "", 0);
+        str_args[i].index = -1;
+      }
+      l1 = 0;
+      l2 = 0;
+      l3 = 0;
+      trace_pid = num;
+      printf("pid: %d, syscall: %s, args: (", sys_getpid(), sysnames[num]);
+    }
+
+    int start_ticks = ticks;
+    int retVal = syscalls[num]();
+    int end_ticks = ticks;
+
+    p->trapframe->a0 = retVal;
+    if(num == p->traced_pid){
+      for(i = 0; i < 10; i++){
+        int found = 0;
+        for(j = 0; j < 10; j++){
+          if(int_args[j].index == i){
+            found = 1;
+            printf("%d, ", int_args[j].value);
+            break;
+          }
+          if(addr_args[j].index == i){
+            found = 1;
+            printf("%p, ", addr_args[j].address);
+            break;
+          }
+          if(str_args[j].index == i){
+            found = 1;
+            printf("%s, ", str_args[j].str);
+            break;
+          }
+        }
+        if(found == 0)
+          break;
+      }
+      printf("\b\b");
+      //fflush(stdout);
+      printf("), return: %d\n", retVal);
+      trace_pid = -1;
+    }
+
+    acquire(&tickslock);
+    syscall_count[num]++;
+    release(&tickslock);
+
+    acquire(&tickslock);
+    syscall_accum_time[num] += (end_ticks - start_ticks);
+    release(&tickslock);
+
   } else {
     printf("%d %s: unknown sys call %d\n",
             p->pid, p->name, num);
diff --git a/kernel/syscall.h b/kernel/syscall.h
index bc5f356..988f437 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -1,3 +1,5 @@
+#define NSYSCALLS 24
+
 // System call numbers
 #define SYS_fork    1
 #define SYS_exit    2
@@ -20,3 +22,5 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_trace  22
+#define SYS_history  23
\ No newline at end of file
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index 1de184e..a7fa2c6 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -89,3 +89,29 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+uint64
+sys_trace(void)
+{
+  int n;
+  argint(0, &n);
+  return trace(n);
+}
+
+uint64
+sys_history(void)
+{
+  int n;
+  argint(0, &n);
+  uint64 add;
+  struct syscall_stat stat1;
+  argaddr(1, &add);
+  if(n <= 0 || n >= NSYSCALLS){
+    return -1;
+  }
+  struct proc *p = myproc();
+  history(n, &stat1);
+  if(copyout(p->pagetable, add, (char *)&stat1, sizeof(stat1)) < 0)
+      return -1;
+  return 0;
+}
\ No newline at end of file
diff --git a/user/history.c b/user/history.c
new file mode 100644
index 0000000..4d79069
--- /dev/null
+++ b/user/history.c
@@ -0,0 +1,38 @@
+#include "kernel/param.h"
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+
+struct syscall_stat{
+    char syscall_name[16];
+    int count;
+    int accum_time;
+};
+
+int
+main(int argc, char *argv[])
+{
+  struct syscall_stat stat1;
+  int i;
+  if(argc == 1){
+    for(i = 1; i < NSYSCALLS; i++){
+        int result = history(i, &stat1);
+        if(result != -1)
+          printf("%d:\tsyscall: %s, #: %d, time: %d\n", i, stat1.syscall_name, stat1.count, stat1.accum_time);
+    }
+    exit(0);
+  }
+  if(argv[1][0] < '0' || argv[1][0] > '9'){
+    fprintf(2, "Usage: %s sys_call_num command\n", argv[0]);
+    exit(1);
+  }
+
+  if (history(atoi(argv[1]), &stat1) < 0) {
+    fprintf(2, "%s: history failed\n", argv[0]);
+    exit(1);
+  }
+
+  printf("%d:\tsyscall: %s, #: %d, time: %d\n", atoi(argv[1]), stat1.syscall_name, stat1.count, stat1.accum_time);
+
+  exit(0);
+}
\ No newline at end of file
diff --git a/user/trace.c b/user/trace.c
new file mode 100644
index 0000000..e38c06e
--- /dev/null
+++ b/user/trace.c
@@ -0,0 +1,27 @@
+#include "kernel/param.h"
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+
+int
+main(int argc, char *argv[])
+{
+  int i;
+  char *nargv[MAXARG];
+
+  if(argc < 3 || (argv[1][0] < '0' || argv[1][0] > '9')){
+    fprintf(2, "Usage: %s sys_call_num command\n", argv[0]);
+    exit(1);
+  }
+
+  if (trace(atoi(argv[1])) < 0) {
+    fprintf(2, "%s: trace failed\n", argv[0]);
+    exit(1);
+  }
+
+  for(i = 2; i < argc && i < MAXARG; i++){
+    nargv[i-2] = argv[i];
+  }
+  exec(nargv[0], nargv);
+  exit(0);
+}
\ No newline at end of file
diff --git a/user/user.h b/user/user.h
index 4d398d5..f73adcb 100644
--- a/user/user.h
+++ b/user/user.h
@@ -1,4 +1,5 @@
 struct stat;
+struct syscall_stat;
 
 // system calls
 int fork(void);
@@ -22,6 +23,8 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int trace(int);
+int history(int, struct syscall_stat*);
 
 // ulib.c
 int stat(const char*, struct stat*);
@@ -39,3 +42,5 @@ void free(void*);
 int atoi(const char*);
 int memcmp(const void *, const void *, uint);
 void *memcpy(void *, const void *, uint);
+
+#define NSYSCALLS 24
diff --git a/user/usys.pl b/user/usys.pl
index 01e426e..83a6248 100755
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -36,3 +36,5 @@ entry("getpid");
 entry("sbrk");
 entry("sleep");
 entry("uptime");
+entry("trace");
+entry("history");
\ No newline at end of file
